apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3.11.10-management
          ports:
            - containerPort: 5672
              name: rabbitmq
            - containerPort: 15672
              name: rabbitmq-mgmt

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
      name: rabbitmq
    - protocol: TCP
      port: 15672
      targetPort: 15672
      name: rabbitmq-mgmt

---
# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector: # mysql Pod Should contain same labels
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:5.7 # image from docker-hub
          args:
            - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value : d04m07a1997

            - name: MYSQL_DATABASE
              value : prueba1



          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage # Obtaining 'vloume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
# Define a 'Service' To Expose mysql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: mysql  # DNS name
  labels:
    app: mysql
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:       # mysql Pod Should contain same labels
    app: mysql
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-statefulset
spec:
  serviceName: mongodb-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:3
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-beta
spec:
  selector:
    matchLabels:
      app: app-beta-k8s-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: app-beta-k8s-mysql
    spec:
      containers:
        - name: app-beta-k8s
          image: dapevi1997/app-beta:ku2
          ports:
            - containerPort: 8081
          env:   # Setting Enviornmental Variables
            - name: DB_HOST   # Setting Database host address from configMap
              value : mysql


            - name: DB_NAME  # Setting Database name from configMap
              value : prueba1

            - name: DB_USERNAME  # Setting Database username from Secret
              value : root

            - name: DB_PASSWORD # Setting Database password from Secret
              value : d04m07a1997


---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: app-beta-svc
spec:
  selector:
    app: app-beta-k8s-mysql
  ports:
    - protocol: "TCP"
      port: 8081 # The port that the service is running on in the cluster
      targetPort: 8081 # The port exposed by the service
  type: NodePort # type of the service.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-gama
spec:
  selector:
    matchLabels:
      app: app-gama-k8s-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: app-gama-k8s-mysql
    spec:
      containers:
        - name: app-gama-k8s
          image: dapevi1997/app-gama:ku1
          ports:
            - containerPort: 8082


---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: app-gama-svc
spec:
  selector:
    app: app-gama-k8s-mysql
  ports:
    - protocol: "TCP"
      port: 8082 # The port that the service is running on in the cluster
      targetPort: 8082 # The port exposed by the service
  type: NodePort # type of the service.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-service
spec:
  selector:
    matchLabels:
      app: app-service-k8s-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: app-service-k8s-mysql
    spec:
      containers:
        - name: app-service-k8s
          image: dapevi1997/app-service:ku1
          ports:
            - containerPort: 8080
          env:   # Setting Enviornmental Variables
            - name: DB_HOST   # Setting Database host address from configMap
              value : mysql


            - name: DB_NAME  # Setting Database name from configMap
              value : prueba1

            - name: DB_USERNAME  # Setting Database username from Secret
              value : root

            - name: DB_PASSWORD # Setting Database password from Secret
              value : d04m07a1997


---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: app-service-svc
spec:
  selector:
    app: app-service-k8s-mysql
  ports:
    - protocol: "TCP"
      port: 8080 # The port that the service is running on in the cluster
      targetPort: 8080 # The port exposed by the service
  type: NodePort # type of the service.